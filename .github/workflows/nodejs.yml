name: Node.js - Test & Publish Package

on:
  workflow_dispatch:
  push:
    branches:
      - colton/improved-examples-and-releases
    tags:
      - 'v*'


defaults:
  run:
    working-directory: toolchain/chidori

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Builds the native binary and uploads it to GitHub releases.
  nodejs-github-native:
    permissions: write-all
    name: nodejs-${{ matrix.node_version }}-${{ matrix.system.target }}-${{ matrix.system.os }}
    runs-on: ${{ matrix.system.os }}
    strategy:
      fail-fast: false
      matrix:
        node_version:
          - 16
          - 18
          - 19
          - 20
        system:
#          currently unsupported by github
#          - os: macos-12-arm
#            target: aarch64-apple-darwin
          - os: macos-12
            target: x86_64-apple-darwin
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
          - os: windows-2022
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name }}
      # Set the release version based on what we've specified in the workspace Cargo.toml
      - name: Set release version
        run: python3 ../scripts/get_target_version.py
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
          registry-url: 'https://registry.npmjs.org'
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            toolchain/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Install modules
        working-directory: toolchain/chidori
        run: yarn install
      # Update the package version to tag version. So artifacts uploaded to GitHub release will be named correctly.
      - name: Tweak package.json
        working-directory: toolchain/chidori
        run: python3 -c "import os; import json; p = json.load(open('package.json')); p['version'] = os.environ['ARTIFACT_VERSION']; json.dump(p, open('package.json', 'w'), indent=2, ensure_ascii=False);"
      # Install the rust toolchain
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.system.target }}
          override: true
      # Build the native release package
      - name: Build native
        working-directory: toolchain/chidori
        run: yarn run build-release
      # Make a node-pre-gyp package using the native binary
      - name: Package the asset
        working-directory: toolchain/chidori
        run: npx @mapbox/node-pre-gyp package
      # Upload the native binary to GitHub releases, a release must be created first
      - name: Upload to GitHub releases
        working-directory: toolchain/chidori
        # Use bash, even on Windows to make find available
        shell: bash
        # A release needs to be created before upload
        run: gh release upload ${{ env.ARTIFACT_VERSION }} "$(find ./build -name *.tar.gz)" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  # Ships a GitHub release to the NPM registry
#  nodejs-npm:
#    name: nodejs-npm
#    runs-on: ubuntu-latest
#    # Require a successful native build before releasing to NPM.
#    needs: [ nodejs-github-native ]
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          ref: ${{ github.event.release.tag_name }}
#      # Set the release version based on what we've specified in the workspace Cargo.toml
#      - name: Set release version
#        run: python3 ../scripts/get_target_version.py
#      - uses: actions/setup-node@v3
#        with:
#          node-version: ${{ matrix.node_version }}
#          # Url is important! This makes NODE_AUTH_TOKEN accessible to npm publish.
#          registry-url: 'https://registry.npmjs.org'
#      - name: Install modules
#        working-directory: toolchain/chidori
#        run: yarn install
#      - name: Tweak package.json
#        working-directory: toolchain/chidori
#        # This will update the package version to tag version
#        # This will also add an installation script in package.json so users who `npm i` this package
#        # will trigger node-pre-gyp to pull the os and arch specific binary.
#        run: python3 -c "import os; import json; p = json.load(open('package.json')); p['scripts']['install'] = 'node-pre-gyp install'; p['version'] = os.environ['ARTIFACT_VERSION'].replace('v', ''); json.dump(p, open('package.json', 'w'), indent=2, ensure_ascii=False);"
#      - name: Show package.json
#        working-directory: toolchain/chidori
#        run: cat package.json
#      - name: Publish to npm
#        working-directory: toolchain/chidori
#        # `--access public` is used to publish to my account's scope.
#        run: npm publish --access public
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
#
#
